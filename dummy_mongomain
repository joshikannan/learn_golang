package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Todo struct {
	// ID        int `json:" _id" bson:"_id"` // without db
	ID        primitive.ObjectID `json:" id,omitempty" bson:"_id,omitempty"` // mongodb have its own id as primitive object id // omitempty to avoid default value 000000000000
	Completed bool               `json:"completed"`
	Body      string             `json:"body"`
}

var collection *mongo.Collection

func main() {

	fmt.Println("kannan")

	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal("Error on loading .env file:", err)
	}

	MONGODB_URI := os.Getenv("MONGO_URI")
	clientOptions := options.Client().ApplyURI(MONGODB_URI)
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Disconnect(context.Background())
	err = client.Ping(context.Background(), nil)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Connected to mongodb atlas")

	collection = client.Database("golang_db").Collection("todos")
	app := fiber.New()

	app.Get("/api/todo", GetTodos)
	app.Post("/api/todo", CreateTodo)
	app.Patch("/api/todo/:id", UpdateTodo)
	app.Delete("/api/todo/:id", DeleteTodo)

	PORT := os.Getenv("PORT")
	if PORT == "" {
		PORT = "4000"
	}
	log.Fatal(app.Listen(":" + PORT))

}

// ================================================== || GetTodos  || ==================================================

func GetTodos(c *fiber.Ctx) error {
	var todos []Todo
	cursor, err := collection.Find(context.Background(), bson.M{})
	if err != nil {
		return err
	}
	defer cursor.Close(context.Background())
	for cursor.Next(context.Background()) {
		var todo Todo
		if err := cursor.Decode(&todo); err != nil {
			return err
		}
		todos = append(todos, todo)
	}
	if len(todos) == 0 {
		return c.Status(200).JSON(fiber.Map{"todos": []Todo{}, "success": true})
	}
	return c.Status(200).JSON(fiber.Map{"todos": todos, "success": true})

}

// ================================================== || Create New Todo || ==================================================
func CreateTodo(c *fiber.Ctx) error {

	todo := new(Todo)

	if err := c.BodyParser(todo); err != nil {
		return err
	}

	if todo.Body == "" {
		return c.Status(400).JSON(fiber.Map{"error": "Todo body is required"})
	}

	insertResult, err := collection.InsertOne(context.Background(), todo)

	if err != nil {
		return err
	}
	todo.ID = insertResult.InsertedID.(primitive.ObjectID)

	return c.Status(201).JSON(todo)
}

// ================================================== || Update Todo || ==================================================
func UpdateTodo(c *fiber.Ctx) error {
	id := c.Params("id")
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "Invalid todo id"})

	}
	filter := bson.M{"_id": objectID}
	update := bson.M{"$set": bson.M{"completed": true}}

	_, err = collection.UpdateOne(context.Background(), filter, update)
	if err != nil {
		return err
	}

	return c.Status(200).JSON(fiber.Map{"success": true})
}

// ================================================== || Delete Todo || ==================================================
func DeleteTodo(c *fiber.Ctx) error {
	id := c.Params("id")
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "Invalid todo id"})

	}
	filter := bson.M{"_id": objectID}

	_, err = collection.DeleteOne(context.Background(), filter)
	if err != nil {
		return err
	}

	return c.Status(200).JSON(fiber.Map{"success": "Todo deleted successfully"})
}
